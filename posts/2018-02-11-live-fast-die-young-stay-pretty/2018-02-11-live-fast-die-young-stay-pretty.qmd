---
title: Live Fast, Die Young, Stay Pretty?
author: Art Steinmetz
date: '2018-02-11'
slug: live-fast-die-young-stay-pretty
categories:
  - R
tags:
  - music
  - web scraping
  - health
  - gapminder
---



<div id="analyzing-deaths-of-rock-musicians" class="section level2">
<h2>Analyzing deaths of rock musicians</h2>
<p>Live fast, die young, stay pretty? That’s the stereotype for rockers, or it was. We only need to look at Keith Richards, over 70 and going strong, to find a major counterexample. Do rockers die young? What do they die of? How does that compare to the broader population (in the U.S., anyway). It turns out there are some suprising answers to those questions.</p>
<p>Along the way we’ll learn something about web scraping, html parsing and some <code>ggplot2</code> tricks. We use the <code>tidyverse</code> dialect throughout, just so you know.</p>
</div>
<div id="load-libraries-and-do-some-setup." class="section level1">
<h1>Load libraries and do some setup.</h1>
<p>Note the <code>mutate_cond</code> function in the chunk below. We’ll use it later.</p>
<pre class="r"><code>library(ggplot2)
library(stringr)
library(tidyverse)
library(lubridate)
library(rvest)
library(ggrepel)
library(gapminder)
library(knitr)
library(RColorBrewer)

# function to mutate only rows meeting a certain condition
# most useful enhancement to dplyr ever!
# I load this in all my projects.
mutate_cond &lt;- function(.data, condition, ..., envir = parent.frame()) {
  #ref: https://stackoverflow.com/questions/34096162/dplyr-mutate-replace-on-a-subset-of-rows
  condition &lt;- eval(substitute(condition), .data, envir)
  condition[is.na(condition)] = FALSE
  .data[condition, ] &lt;- .data[condition, ] %&gt;% mutate(...)
  .data
}</code></pre>
</div>
<div id="load-tables-from-wikipedia." class="section level1">
<h1>Load tables from Wikipedia.</h1>
<p>Wikipedia maintains a table of <a href="https://en.wikipedia.org/wiki/List_of_deaths_in_rock_and_roll">deaths in rock</a> which will be our primary source. All the usual Wikipedia caveats apply plus some more. The people included in this table are whoever the posters want to include. Few are rock “stars.” Many are producers, agents, roadies and the like. But hey, they are all in the life, right? There are errors in spelling and place names. Since this is a recreational excercise, I did not spend time validating the entries.</p>
<p>The deaths for 2010 and later are in a separate article so we need to get both. When I started this project they were on one page. By the time you read this the Wikipedia gods may have changed it again. Beware.</p>
<pre class="r"><code>death_page1&lt;-read_html(&quot;https://en.wikipedia.org/wiki/List_of_deaths_in_rock_and_roll&quot;)
write_html(death_page1,file=&quot;death_page1.html&quot;)
death_page2&lt;-read_html(&quot;https://en.wikipedia.org/wiki/List_of_2010s_deaths_in_rock_and_roll&quot;)
write_html(death_page2,file=&quot;death_page2.html&quot;)</code></pre>
<div id="a-note-on-pointers." class="section level2">
<h2>A note on “pointers.”</h2>
<p>R and the <code>rvest</code> package have some great functions for converting html <code>&lt;table&gt;</code>s into data frames. <code>rvest</code> is a very powerful package but one thing I learned is that it works with pointers to the data rather than the actual data. C programmers and old geezers like me will be familiar with this. I remember pop and push and stacks and all that stuff from the old days. R generally doesn’t pass values “by reference.” It passes “by value.” That’s why when you modify data in the scope of a function it doesn’t affect the value of the data outside unless you assign it with <code>return &lt;data&gt;</code>. Using pointers in <code>rvest</code> functions means modifications to html data happen without an explicit assigment.</p>
<p>Consider a trival example:</p>
<pre class="r"><code>#usual R behavior
my_function&lt;- function(x){return (x+1)}
data=3
`#this doesn&#39;t change data but it would if data was passed by reference
my_function(data)
`# [1] 4
data
`# [1] 3
`#this does change data in the usual R way
data&lt;-my_function(data)
data
`# [1] 4</code></pre>
<p>If we were passing values “by reference” <code>my_function(data)</code> would change <code>data</code> without the need to assign it back to <code>data</code>. That’s how <code>rvest</code> works.</p>
<p>We use this behavior to combine the tables in the two Wikipedia articles into one html page by extracting the tables in the second wiki article and making them xml siblings of the tables in the first.</p>
<p>Alternatively, we could load the two pages, extract the tables separately and combine them later but this is trickier!</p>
<pre class="r"><code>#join pre-2010 to post 2010
death_page&lt;-death_page1
death_page_child&lt;-death_page1 %&gt;% xml_children() %&gt;% .[2]
death_page2_child&lt;-death_page2 %&gt;% xml_children() %&gt;% .[2]
#create one big web page by adding all the first level children from the second
#page to the first.
#This modifies death_page by changing the list of pointers associated with it.
xml_add_sibling(death_page_child,death_page2_child)
write_html(death_page,file=&quot;death_page.html&quot;)</code></pre>
</div>
</div>
<div id="clean-the-data." class="section level1">
<h1>Clean the data.</h1>
<p>Unfortunately, as is often the case, the raw data is not as clean as we might like.</p>
<p>Here’s a data wrastlin’ puzzle. The artist and the band name (or names) share a single table cell. This is not a problem for the anonymous summary stats we will present here but I am also doing another analysis where I look at radio station playlist patterns do detect deaths (the subject of a future post). For that we need to flag the event by band or artist, however it appears. Let’s tackle it now.</p>
<p>Parsing HTML is a dark art and I would not rise to the level of sorcerer’s apprentice. The clue that will let us separate the two (or more) identifiers is that the band is encased in a <code>&lt;small&gt;&lt;\small&gt;</code> tag within the <code>&lt;tr&gt;&lt;\tr&gt;</code> tag that <code>html_table</code> looks for. Extracting the just the text from the cell concatenates the two items without a separator. The <code>rvest</code> functions won’t help this noob here. I chose to do old-school raw text editing with search/replace to break the person and the band into separate columns. So instead of <code>&lt;td&gt;Person&lt;small&gt;Band,Band&lt;\small&gt;&lt;\td&gt;</code> we want to have <code>&lt;td&gt;Person,Band,band&lt;\td&gt;</code>. This way we can separate out band names later.</p>
<pre class="r"><code>#Crude hack follows
# read it in as a raw text file and edit the tags
# to break the artist name and band names into comma-separated list
# by replacing &#39;&lt;small&gt;&#39; with &#39;,&#39;.
death_page_text&lt;-read_file(&quot;death_page.html&quot;)
death_page_text&lt;- gsub( &quot;&lt;small&gt;&quot;, &quot;, &quot;, death_page_text )
death_page_text&lt;- gsub( &quot;&lt;/small&gt;&quot;, &quot;&quot;, death_page_text )
write_file(death_page_text,&quot;death_page2.html&quot;)</code></pre>
<p>A further wrinkle is some of the age-at-death numbers are given as a range like “45-46” which causes <code>html_table</code> to create a <code>character</code> column for <code>Age</code>. Tables that don’t have any ranges, just single numbers, will be extracted as <code>numeric</code> columns. We have many tables so We want to use <code>bind_rows</code> to combine all the web page tables into one data frame. Alas, <code>bind_rows</code> will balk at chaining columns of diferent types. To avoid this, let’s arbitrarily take the lowest number in any age range we find before binding. We can do this as part of the table extraction process.</p>
<p>Also omit the first five tables which, by inspection, we know are not the mortality tables.</p>
<pre class="r"><code># omit first five tables
deaths_raw&lt;-read_html(&quot;death_page2.html&quot;) %&gt;% 
  html_nodes(&quot;table&quot;) %&gt;% 
  .[5:length(.)] %&gt;% 
  html_table(fill=TRUE) %&gt;%
  lapply(function(x){mutate(x,Age=as.integer(str_extract(as.character(Age),&quot;[0-9]+&quot;)))}) %&gt;% 
  bind_rows() %&gt;% 
  as_data_frame() %&gt;% 
  {.}

deaths_raw[1:5,] %&gt;% kable(format.args=list(big.mark=&quot;,&quot;))</code></pre>
<table>
<thead>
<tr class="header">
<th align="left">Name</th>
<th align="right">Age</th>
<th align="left">Date</th>
<th align="left">Location</th>
<th align="left">Cause of death</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Kansas Joe McCoy, Harlem Hamfats</td>
<td align="right">44</td>
<td align="left">January 28, 1950</td>
<td align="left">Chicago, Illinois, USA</td>
<td align="left">Heart disease[1]</td>
</tr>
<tr class="even">
<td align="left">Bertha Hill</td>
<td align="right">45</td>
<td align="left">May 7, 1950</td>
<td align="left">New York City, New York, USA</td>
<td align="left">Hit and run accident[2]</td>
</tr>
<tr class="odd">
<td align="left">Papa Charlie McCoy, Harlem Hamfats</td>
<td align="right">41</td>
<td align="left">July 26, 1950</td>
<td align="left">Chicago, Illinois, USA</td>
<td align="left">Paralytic brain disease[1]</td>
</tr>
<tr class="even">
<td align="left">Cecil Gant</td>
<td align="right">37</td>
<td align="left">February 4, 1951</td>
<td align="left">Nashville, Tennessee, USA</td>
<td align="left">Pneumonia and heart attack[3]</td>
</tr>
<tr class="odd">
<td align="left">Luke Jordan</td>
<td align="right">60</td>
<td align="left">June 25, 1952</td>
<td align="left">Lynchburg, Virginia, USA</td>
<td align="left">[4]</td>
</tr>
</tbody>
</table>
<p>…and so on.</p>
<p>Almost done with the boring bits. Separate out the list of name and bands into, at most, four bands. Turn the date string into a POSIX-style date. Replace the empty causes with “Not Specified.” Finally, strip the footnote numbers out of the file.</p>
<pre class="r"><code>#take at most three band names.
deaths&lt;-deaths_raw %&gt;% 
  separate(Name,into=c(&quot;Name&quot;,&quot;band1&quot;,&quot;band2&quot;,&quot;band3&quot;,&quot;band4&quot;),sep=&quot;,&quot;,extra=&quot;drop&quot;) %&gt;% 
  unique()


deaths&lt;-deaths %&gt;% 
  mutate(Date=parse_date(Date,&quot;%B %d, %Y&quot;)) %&gt;% 
  filter(!is.na(Date))

#remove footnotes and change empty causes to &quot;Not Specified&quot;

deaths&lt;-deaths %&gt;% mutate(`Cause of death`=str_replace(`Cause of death`,&quot;\\[[0-9,]+\\]&quot;,&quot;&quot;))
deaths&lt;-deaths %&gt;% mutate_cond(is.na(`Cause of death`),`Cause of death`=&quot;Not Specified&quot;)
deaths&lt;-deaths %&gt;% mutate_cond(`Cause of death`==&quot;&quot;,`Cause of death`=&quot;Not Specified&quot;)
deaths[1:5,]%&gt;% kable(format.args=list(big.mark=&quot;,&quot;))</code></pre>
<table>
<thead>
<tr class="header">
<th align="left">Name</th>
<th align="left">band1</th>
<th align="left">band2</th>
<th align="left">band3</th>
<th align="left">band4</th>
<th align="right">Age</th>
<th align="left">Date</th>
<th align="left">Location</th>
<th align="left">Cause of death</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Kansas Joe McCoy</td>
<td align="left">Harlem Hamfats</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="right">44</td>
<td align="left">1950-01-28</td>
<td align="left">Chicago, Illinois, USA</td>
<td align="left">Heart disease</td>
</tr>
<tr class="even">
<td align="left">Bertha Hill</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="right">45</td>
<td align="left">1950-05-07</td>
<td align="left">New York City, New York, USA</td>
<td align="left">Hit and run accident</td>
</tr>
<tr class="odd">
<td align="left">Papa Charlie McCoy</td>
<td align="left">Harlem Hamfats</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="right">41</td>
<td align="left">1950-07-26</td>
<td align="left">Chicago, Illinois, USA</td>
<td align="left">Paralytic brain disease</td>
</tr>
<tr class="even">
<td align="left">Cecil Gant</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="right">37</td>
<td align="left">1951-02-04</td>
<td align="left">Nashville, Tennessee, USA</td>
<td align="left">Pneumonia and heart attack</td>
</tr>
<tr class="odd">
<td align="left">Luke Jordan</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="left">NA</td>
<td align="right">60</td>
<td align="left">1952-06-25</td>
<td align="left">Lynchburg, Virginia, USA</td>
<td align="left">Not Specified</td>
</tr>
</tbody>
</table>
</div>
<div id="another-caveat" class="section level1">
<h1>Another Caveat</h1>
<p>Now we have a clean table. Before going further we should note that death entries are growing over time. No great surprises here but but note that the in the early days of rock there were were few old rockers. We should keep this in the back of our mind as we proceed.</p>
<pre class="r"><code>deaths&lt;-deaths %&gt;% mutate(Year=year(Date))

deaths %&gt;%  
  group_by(Year) %&gt;% 
  summarise(Entries=n()) %&gt;%
  ggplot(aes(Year,Entries))+geom_col()</code></pre>
![More Years, More Rockers](img/unnamed-chunk-8-1.png)

# Common causes of Death
<p>Let’s do a quick exploration to see if we are satisfied with the features of our data set.</p>
<pre class="r"><code>#what are common causes of death
cause_table&lt;-deaths %&gt;% 
  group_by(`Cause of death`) %&gt;% 
  summarize(Cause=n()) %&gt;% 
  arrange(desc(Cause))

cause_table[1:11,]%&gt;% kable(format.args=list(big.mark=&quot;,&quot;))</code></pre>
<table>
<thead>
<tr class="header">
<th align="left">Cause of death</th>
<th align="right">Cause</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Not Specified</td>
<td align="right">599</td>
</tr>
<tr class="even">
<td align="left">Heart attack</td>
<td align="right">240</td>
</tr>
<tr class="odd">
<td align="left">Cancer</td>
<td align="right">165</td>
</tr>
<tr class="even">
<td align="left">Lung cancer</td>
<td align="right">104</td>
</tr>
<tr class="odd">
<td align="left">Traffic accident</td>
<td align="right">78</td>
</tr>
<tr class="even">
<td align="left">Drug overdose</td>
<td align="right">74</td>
</tr>
<tr class="odd">
<td align="left">Heart failure</td>
<td align="right">74</td>
</tr>
<tr class="even">
<td align="left">Stroke</td>
<td align="right">59</td>
</tr>
<tr class="odd">
<td align="left">Natural causes</td>
<td align="right">48</td>
</tr>
<tr class="even">
<td align="left">Pneumonia</td>
<td align="right">48</td>
</tr>
<tr class="odd">
<td align="left">Suicide</td>
<td align="right">41</td>
</tr>
</tbody>
</table>
<p>Looking through the table we see that many causes can be generalized. Let’s aggregate a bit. We are making some choices here. For instance, I call any cause containing the words “heart” or “cardiac” as “heart disease.” I count alcohol as a drug. Where multiple terms exist, drugs trump accidents. Suicide trumps everthing but cancer. Cancer trumps everthing. Note the use of the very handy <code>mutate_cond</code> function.</p>
<pre class="r"><code>#add a new column &quot;general cause&quot;
deaths&lt;-deaths %&gt;% mutate(General_Cause=`Cause of death`)

deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;accident|fall|hit|crash|fire|poison&quot;),General_Cause=&quot;Accident&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;drug|overdose|alcohol&quot;),General_Cause=&quot;Drugs&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),&quot;asphyxiation&quot;),
              General_Cause=&quot;Asphyxiation&quot;)

deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),&quot;shot|shoot|murder|stab|gun|knife&quot;),
              General_Cause=&quot;Murdered&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;heart|cardi|coronary&quot;),General_Cause=&quot;Heart Disease&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),&quot;aids|hiv&quot;),General_Cause=&quot;AIDS&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;diabetes|diabetic&quot;),General_Cause=&quot;Diabetes&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;pneumonia|emphysema|respiratory&quot;),General_Cause=&quot;Lung Disease&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;cirrhosis|neph|liver&quot;),General_Cause=&quot;Liver Disease&quot;)

deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;stroke&quot;),General_Cause=&quot;Stroke&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),
                         &quot;alzh&quot;),General_Cause=&quot;Alzheimers&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),&quot;suicide&quot;),General_Cause=&quot;Suicide&quot;)

#Cancer is last because citing other organs and cancer counts as cancer.  We
#override previous  generalizations
#-omas other than &quot;stomach&quot; and &quot;coma&quot; are cancer
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(`Cause of death`,&quot;oma&quot;) &amp; 
                !str_detect(`Cause of death`,&quot;tomach|coma&quot;),
              General_Cause=&quot;Cancer&quot;)
deaths&lt;-deaths %&gt;% 
  mutate_cond(str_detect(tolower(`Cause of death`),&quot;cancer|tumor&quot;),General_Cause=&quot;Cancer&quot;)</code></pre>
<p>Further aggregate causes. Arbitrarily, label the general cause of any cause below the top 15 as “Other.”</p>
<pre class="r"><code>cause_table&lt;-deaths %&gt;% 
  count(General_Cause) %&gt;% 
  arrange(desc(n)) %&gt;% 
  rename(Rockers=n)

cause_table&lt;-cause_table %&gt;% 
  mutate_cond(!(General_Cause %in% cause_table$General_Cause[1:15]),General_Cause=&quot;Other&quot;)
cause_table&lt;-cause_table %&gt;% 
  mutate_cond(General_Cause ==&quot;Natural causes&quot;,General_Cause=&quot;Other&quot;)
#re-aggregate
cause_table&lt;-cause_table %&gt;%
  group_by(General_Cause) %&gt;% 
  summarize(Rockers=sum(Rockers)) %&gt;% 
  arrange(desc(Rockers))

cause_table&lt;-cause_table %&gt;% mutate(General_Cause= as_factor(General_Cause))
#map it back to the deaths table
deaths&lt;-deaths %&gt;% mutate_cond(!(General_Cause %in% cause_table$General_Cause[1:15]),General_Cause=&quot;Other&quot;)
deaths&lt;-deaths %&gt;% mutate_cond(General_Cause ==&quot;Natural causes&quot;,General_Cause=&quot;Other&quot;)

#We&#39;ve done all the messing with deaths we need to do so lets save it for later.
save(deaths,file=&#39;deaths.rdata&#39;)


gg&lt;-cause_table[1:12,]  %&gt;% 
  ggplot(aes(General_Cause,Rockers))+geom_col()
gg&lt;-gg+coord_flip()
gg</code></pre></p>
![](img/unnamed-chunk-11-1.png)
<p>NOW, we are done with all the data wrangling and can get to the (morbid) fun stuff.</p>
<p>This gives us a decent picture of how rock stars die. Mostly from the same things that kill all of us. Heart disease and cancer were the leading causes of death in US in 2015, followed by lung disease and accidents according to <a href="https://www.cdc.gov/nchs/fastats/deaths.htm" class="uri">https://www.cdc.gov/nchs/fastats/deaths.htm</a> and shown below.</p>
<pre class="r"><code>us_deaths&lt;-data_frame(General_Cause=as_factor(c(&#39;Heart Disease&#39;,&#39;Cancer&#39;,
                                      &#39;Lung Disease&#39;,&#39;Accident&#39;,&#39;Stroke&#39;,
                                      &#39;Alzheimers&#39;,&#39;Diabetes&#39;,&#39;Liver Disease&#39;,
                                      &#39;Suicide&#39;,&#39;Murdered&#39;,&#39;Other&#39;)),
                      US=c(633842,595930,212103,146571,140323,110561,79535,49959,44193,15696,683917))
us_deaths %&gt;% kable(format.args=list(big.mark=&quot;,&quot;))</code></pre>
<table>
<thead>
<tr class="header">
<th align="left">General_Cause</th>
<th align="right">US</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Heart Disease</td>
<td align="right">633,842</td>
</tr>
<tr class="even">
<td align="left">Cancer</td>
<td align="right">595,930</td>
</tr>
<tr class="odd">
<td align="left">Lung Disease</td>
<td align="right">212,103</td>
</tr>
<tr class="even">
<td align="left">Accident</td>
<td align="right">146,571</td>
</tr>
<tr class="odd">
<td align="left">Stroke</td>
<td align="right">140,323</td>
</tr>
<tr class="even">
<td align="left">Alzheimers</td>
<td align="right">110,561</td>
</tr>
<tr class="odd">
<td align="left">Diabetes</td>
<td align="right">79,535</td>
</tr>
<tr class="even">
<td align="left">Liver Disease</td>
<td align="right">49,959</td>
</tr>
<tr class="odd">
<td align="left">Suicide</td>
<td align="right">44,193</td>
</tr>
<tr class="even">
<td align="left">Murdered</td>
<td align="right">15,696</td>
</tr>
<tr class="odd">
<td align="left">Other</td>
<td align="right">683,917</td>
</tr>
</tbody>
</table>
<p>We might also note: Murder: 15,696 (<a href="https://ucr.fbi.gov/crime-in-the-u.s/2015/crime-in-the-u.s.-2015/tables/table-4" class="uri">https://ucr.fbi.gov/crime-in-the-u.s/2015/crime-in-the-u.s.-2015/tables/table-4</a>)</p>
<p>Drug overdoses: 53,000 (2015,<a href="https://www.drugabuse.gov/related-topics/trends-statistics/overdose-death-rates" class="uri">https://www.drugabuse.gov/related-topics/trends-statistics/overdose-death-rates</a>)</p>
<p>Alcohol Poisoning:2,200 (<a href="https://www.cdc.gov/vitalsigns/alcohol-poisoning-deaths/index.html" class="uri">https://www.cdc.gov/vitalsigns/alcohol-poisoning-deaths/index.html</a>)</p>
<p>Drug overdoses may count as “accidents” at the CDC. I don’t separate out Pneumonia from chronic lung problems.</p>
<p>Alzheimer’s is a big killer, nationally, but is only 21st on the list of rock deaths. Perhaps it is underreported or was recognized as a distinct cause of death only recently. Maybe rock stars die too young to get Alzheimers.</p>
<p>I am guilty of some statistical sloppiness from here on since I will be comparing deaths in the U.S. in 2015 to deaths of rock musicians worldwide over all years. As the pinball machines used to say, “For Amusement Only.”</p>
</div>
<div id="you-cant-make-this-stuff-up" class="section level1">
<h1>You can’t make this stuff up</h1>
<p>There are some interesting causes in this Wikipedia tables. Three electrocutions, two by guitar and one my microphone. They all happened in England in the early 70s. Presumably the electrical codes have been tightned up a bit since. Three people are listed who choked on their own vomit. That’s all? Consider the hapless Steve Took of T-Rex, who died from choking on a cocktail cherry. That’s why I always take my Manhattans with a lemon twist instead. I’d choke on those red glowing balls of wax, too!</p>
</div>
<div id="live-fast" class="section level1">
<h1>Live fast?</h1>
<p>While the big killers are the same for both populations, is there evidence that rockers “live fast?” Yes, it turns out.</p>
<pre class="r"><code># we assume the CDC calls drug overdoses an accident so we will too.
comp_deaths&lt;-cause_table %&gt;% 
  mutate_cond(General_Cause==&quot;Drugs&quot;,General_Cause=&quot;Accident&quot;) %&gt;% 
  group_by(General_Cause) %&gt;% 
  summarise(Rockers=sum(Rockers)) %&gt;% 
  right_join(us_deaths) %&gt;%
  mutate(General_Cause=as_factor(General_Cause)) %&gt;% 
  na.omit() %&gt;% 
  mutate(Rockers=Rockers/sum(Rockers),US=US/sum(US)) %&gt;% 
  {.}

gg&lt;-comp_deaths %&gt;% ggplot(aes(US,Rockers))+geom_point()
gg&lt;-gg+  geom_text_repel(label=comp_deaths$General_Cause)
gg&lt;-gg+geom_abline(slope=1,intercept=0)
gg&lt;-gg+labs(title=&quot;Rock Stars are (Almost) Like the Rest of US\nProportion of all Deaths&quot;,caption=&quot;Sources: Wikipedia and CDC&quot;,
y=&#39;Rock Music Deaths (1950-Present)&#39;,x=&#39;US Deaths (2015)&#39;)
gg&lt;-gg+scale_x_continuous(labels=scales::percent)
gg&lt;-gg+scale_y_continuous(labels=scales::percent)
gg</code></pre>

![](img/unnamed-chunk-13-1.png)

<p>This scatter plot shows the preponderance of rock musician deaths relative to the broader US population. Where the points lie above the line it means rock musicians die of that cause more often than the overall US population. We can see that suicide, murder and, especially, accidents account for more relative deaths than they do in the broader population. Cancer seems more prevalent, too. We can’t know, but might suspect, this due to behavioral factors like smoking.</p>
</div>
<div id="die-young" class="section level1">
<h1>Die Young?</h1>
<p>We’ve <code>&lt;grin&gt;</code>scientifically proven<code>&lt;/grin&gt;</code> that rock stars “live fast.” Do they die young? Life expectancies have grown over the years so taking an aggregate average age at death going back to 1950 won’t be comprable to current US life expectancy. To get a comparison let’s pull the data from the <code>gapminder</code> package. This shows life expectancy at birth as opposed to average age at death, which is what our data set has now. We have to get a bit tricky to make the numbers comparable by taking <code>date</code> minus <code>Age</code> to get <code>birth_year</code>. We take the gapminder life expectancy for <code>birth_year</code> and compare that to <code>Age</code> at death. The earliest birth years in our data are much earlier than what the gapminder set covers so we need to extrapolate the data, as well. If we were doing REAL data science we would find a better mortality data set, but this is OUTSIDER data science! We keep it simple.</p>
<pre class="r"><code>#Add birth year column.
deaths&lt;-deaths %&gt;% mutate(birth_year=year(Date)-Age)

#Create extrapolation of gapminder life expectancy using the full range of birth
#years from the deaths table.
#create a row for all years.
life_exp&lt;-gapminder %&gt;% 
  filter(country==&quot;United States&quot;) %&gt;% 
  select(year,lifeExp) %&gt;% rename(birth_year=year) %&gt;% 
  complete(birth_year=min(deaths$birth_year):year(Sys.Date())) %&gt;% 
  {.}
#extrapolate
p&lt;-lm(life_exp$lifeExp~life_exp$birth_year)
life_exp$expected_longevity&lt;-predict(p,life_exp)

#how well does this fit the data?
life_exp %&gt;% ggplot(aes(birth_year,expected_longevity))+geom_line()+geom_point(aes(y=lifeExp))+
  labs(title=&quot;Gapminder U.S. Life Expectancy at Birth, Extrapolated&quot;,y=&quot;Life Expectancy&quot;,x=&quot;Birth Year&quot;)</code></pre>
<p>
![](img/unnamed-chunk-14-1.png)
</p>
<p>We see that the <code>gapminder</code> data is pretty linear so we should be okay to extrapolate. That said, we are going way beyond the observed range. This is generally bad practice and, <a href="https://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001yB">according to Edward Tufte</a>, was a contributing factor in the Columbia Space Shuttle disaster (that, and Powerpoint). I saw some sources that indicate the line should bend downward in the 1800s. I am not controlling for demographics, either. Our sample sizes are pretty small at the far end of the range, anyway, so any conclusions would have to be taken with a huge grain of salt,regardless. Still, lets plunge on!</p>
<p>We need to apply the expected longevity for each musician for the year they were born and compare that to the age they were at death. We then summarize that data for each year of deaths. To put it another way, in any given year, how did the rock musicians who died compare to the life expectancy for all people born in the US the same year each rock musician did?</p>
<p>The plot below shows how the average age at death has changed over the years for rock musicians and the population as a whole. The series for rock musicians in the chart is very unstable early on because the sample size is so small. Despite this caveat and the warning about extrapolation</p>
<p>Plotting note: I am not using “tidy”&quot; data here so I roll some intersting g-g-jitsu to get the legends nice. The musician data and the U.S. population data are in separate columns so they get plotted with separate <code>geom_line</code> aesthetics. We could use <code>gather</code> to make the data tidy but that would complicate taking the difference to show the <code>gap</code> series. This data formate makes it easy to just put it in a new column.</p>
<pre class="r"><code>#merge deaths with life expectancy for the relevant birth year.  Determine
#whether they died &quot;young&quot;  or outlived expectations.
deaths &lt;- deaths %&gt;% 
  left_join(life_exp) %&gt;% 
  select(-lifeExp) %&gt;% 
  mutate(relative_mortality=Age-expected_longevity) %&gt;% 
  {.}

death_age&lt;-deaths %&gt;% 
  group_by(Year) %&gt;% 
  summarise(rock_mean=as.integer(mean(Age)),
            us_mean=mean(expected_longevity),
            gap=mean(relative_mortality))

gg&lt;-death_age %&gt;% ggplot(aes(Year,rock_mean,color=&quot;red&quot;))+geom_line()
gg&lt;-gg+geom_line(aes(y=us_mean,color=&quot;black&quot;))
gg&lt;-gg+geom_col(aes(y=gap,fill=&quot;darkgrey&quot;),color=&quot;lightgrey&quot;)
gg&lt;-gg+labs(title=&quot;Rock Stars Don&#39;t Die Young Anymore\nRocker Death Age vs. U.S. Population&quot;,
            y=&quot;Average Age At Death&quot;,
            x=&quot;Year of Death&quot;,
            caption=&quot;Source:Wikipedia, gapminder.org&quot;)
gg&lt;-gg+ scale_colour_manual(name = &#39;Lines&#39;, 
         values =c(&#39;black&#39;=&#39;black&#39;,&#39;red&#39;=&#39;red&#39;), labels = c(&#39;US Pop.(expected)&#39;,&quot;Rockers (actual)&quot;))
gg&lt;-gg+ scale_fill_identity(name = &#39;Bars&#39;, guide = &#39;legend&#39;,labels = c(&#39;Gap&#39;))
gg</code></pre>
<p>
![](img/unnamed-chunk-15-1.png)
</p>
<p>This really surprised me. Rock stars used to die young, but not any more! They have completely closed the gap with the U.S. population at large (We can discount the early years in this chart since there are so few observations). Again, Keith Richards, stick with the whatever you’re doing, dude!</p>
<p>Be careful, though. Remember what we observed above. In the early days of rock, there were few old musicians. This chart may simply reflect the arrival of old rockers. To do this analysis the proper way we would need to adjust for that somehow. The same issue might skew the relative accident frequency. Further research is needed.</p>
<p>Aww, heck with it. Let’s show the tidyverse way to roll this. Start from the <code>death_age</code> table we created above. Tidyfy it with <code>gather</code>, then plot.</p>
<pre class="r"><code>gg&lt;-death_age %&gt;% gather(key=&quot;cohort&quot;,value=&quot;death_age&quot;,-Year) %&gt;% 
  ggplot(aes(Year,death_age,color=cohort))+geom_line()+geom_hline(yintercept = 0)
gg&lt;-gg+labs(title=&quot;Rock Stars Don&#39;t Die Young Anymore\nRocker Death Age vs. U.S. Population&quot;,
            y=&quot;Average Age At Death&quot;,
            x=&quot;Year of Death&quot;,
            caption=&quot;Source:Wikipedia, gapminder.org&quot;)
gg&lt;-gg+ scale_colour_manual(name=&quot;&quot;,
                            values =c(&#39;blue&#39;,&#39;red&#39;,&quot;black&quot;),
                            labels = c(&#39;Gap&#39;,&quot;Rockers&quot;,&#39;US Pop.(expected)&#39;))
gg</code></pre>
<p>
![](img/unnamed-chunk-16-1.png)
</p>
<p>This is much simpler, at the expense of losing the bar <code>geom</code> for <code>Gap</code>. The first example is a complicated mix of mixing <code>color</code>, <code>fill</code> and legend labels. The code for the second is far more clear to me. But…if we want to mix <code>geom_line</code> and <code>geom_bar</code> we are back to a more complicated treatment.</p>
</div>
<div id="stay-pretty-the-27-club." class="section level1">
<h1>Stay pretty? The “27 Club.”</h1>
<p>“They” say 27 is particularly risky age to be a rock star. <a href="https://en.wikipedia.org/wiki/27_Club">The “27 club” is a thing</a>. Is it truly standout year for mortality, or is it just a meme without grounds?</p>
<p>We’ll plot the number of deaths by age and highlight 27. Create the highlight by making a vector, <code>fills</code>, that specifies the color of each bar in advance. At first glance, creating <code>fills</code> seems overly complicated. It’s slightly tricky since not all ages have deaths so a consecutive series won’t work.</p>
<pre class="r"><code>highlight=27
# the code below creates the list of colors for plot bars, making just one red.
# I suspect I am making this harder than it needs to be.
fills&lt;-deaths %&gt;% 
  select(Age) %&gt;%
  unique() %&gt;% 
  arrange(Age) %&gt;% 
  mutate(color=&quot;black&quot;) %&gt;% 
  mutate_cond(Age==highlight,color=&quot;red&quot;) %&gt;% 
  pull(color) %&gt;% 
  {.}

gg&lt;-deaths %&gt;% ggplot(aes(Age))+geom_bar(fill=fills)
gg&lt;-gg+labs(title=&quot;Rock Musician Age of Death (1950-2017)&quot;,y=&quot;Count&quot;)
gg&lt;-gg+annotate(&quot;text&quot;,x=27,y=55,label=&quot;Age 27&quot;,size=8)
gg</code></pre>
<p>
![](img/unnamed-chunk-17-1.png)
</p>
<p>Well, well, well. It turns out that 27 IS a risky age! Optically, it looks like about double the mortality we might otherwise expect. We always have to be wary of carts leading horses, though. Perhaps the folks who are interested in the topic are more than usually dilligent in finding examples and adding them to the Wikipedia page. Still, it’s fascinating. Why do 27-year olds die? You already know the answer.</p>
<pre class="r"><code>deaths %&gt;% filter(Age==highlight) %&gt;% 
  group_by(General_Cause) %&gt;% 
  summarise(Count=n()) %&gt;%
  arrange(desc(Count))%&gt;% 
  kable(format.args=list(big.mark=&quot;,&quot;))</code></pre>
<table>
<thead>
<tr class="header">
<th align="left">General_Cause</th>
<th align="right">Count</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Accident</td>
<td align="right">9</td>
</tr>
<tr class="even">
<td align="left">Drugs</td>
<td align="right">8</td>
</tr>
<tr class="odd">
<td align="left">Other</td>
<td align="right">6</td>
</tr>
<tr class="even">
<td align="left">Suicide</td>
<td align="right">5</td>
</tr>
<tr class="odd">
<td align="left">Not Specified</td>
<td align="right">4</td>
</tr>
<tr class="even">
<td align="left">Murdered</td>
<td align="right">3</td>
</tr>
<tr class="odd">
<td align="left">Cancer</td>
<td align="right">1</td>
</tr>
<tr class="even">
<td align="left">Diabetes</td>
<td align="right">1</td>
</tr>
<tr class="odd">
<td align="left">Heart Disease</td>
<td align="right">1</td>
</tr>
<tr class="even">
<td align="left">Lung Disease</td>
<td align="right">1</td>
</tr>
</tbody>
</table>
<p>Tragic, of course. Those of us who have achieved a certain age occasionally reflect upon all the times in our youth when we did stupid stuff that could have killed us but luck favored us at that moment. Did I say “we?” Well maybe just me.</p>
<p>How do causes of death change as rock musicians age? For this we’ll use a <code>geom_density</code> plot to get smooth progressions over time in a stacked format. Using <code>position=&quot;fill&quot;</code> is the way to get the stack of causes to reach 100% for all age cohorts. I mention this because I was scratching my head over how to do this. I was confusing the use of the argument <code>&quot;fill&quot;</code> in this context with the use of <code>fill</code> to create a different series for each categories of a variable. We use <code>fill</code> in both senses here: <code>geom_density(aes(fill=General_Cause),color=&quot;grey&quot;,position=&quot;fill&quot;)</code></p>
<p>If we assume “Not Specified” deaths are in proportion to the reported causes, we can filter it it out get a clearer picture.</p>
<pre class="r"><code>#cut off below 21 and above 85 because the data gets pretty thin
gg&lt;-deaths %&gt;%  
  filter(General_Cause != &quot;Not Specified&quot;) %&gt;% 
  filter(Age &gt;21,Age&lt;86) %&gt;% 
  ggplot(aes(Age,..count..))+geom_density(aes(fill=General_Cause),color=&quot;grey&quot;,alpha=0.9,position=&quot;fill&quot;)
gg&lt;-gg+labs(title=&quot;Top Causes of Rock Musician Deaths by Age of Death&quot;,
            y=&quot;Relative Frequency&quot;)
gg&lt;-gg+scale_y_continuous(labels=scales::percent,limits=c(0,1.00))
gg&lt;-gg+theme(panel.background = element_blank(),
             panel.grid.major.x = element_line(color=&quot;black&quot;))
#make a palette for 15 categories with good color separation
pal&lt;-c(brewer.pal(12,&quot;Set3&quot;),brewer.pal(3,&quot;Set2&quot;))
gg&lt;-gg+scale_fill_manual(values=pal)
gg</code></pre>
<p>
![](img/unnamed-chunk-19-1.png)
</p>
<p>If you make it into your 50s as a rocker you are out of the woods for suicide, murder and accidents. Cancer supplants accidents as the leading cause after age 40. Heart disease is prevalent starting at 40 and onward. “Not Specified” rises substantially with age. I suspect it’s because rock stars who die in their prime are more reported upon.</p>
</div>
<div id="a-couple-more-questions-suggested-by-our-discoveries." class="section level1">
<h1>A couple more questions suggested by our discoveries.</h1>
<p>Note the emergence and disappearance of AIDS as a cause of death from people in their late 20s to 50. Is this a function of just the 80s and 90s when AIDS was a particular scourge? Is it now a chronic, manageable, condition so that it won’t be a frequent cause of death any more? Let’s look at the number of reported AIDS deaths by year.</p>
<pre class="r"><code>deaths %&gt;% filter(General_Cause==&quot;AIDS&quot;) %&gt;% ggplot(aes(Year))+geom_bar()</code></pre>
<p>
![](img/unnamed-chunk-20-1.png)
</p>
<p>There are so few instances of AIDS deaths that we can’t be confident of our hypothesis. Still, it is consistent with the dissapearance of AIDS as a cause after 2001 for many years - until 2017. The last case is Michael Freidman. I question his inclusion on this list as he was known as a Broadway song writer. Still, his was a tragic case. His disease progressed rapidly but neither he nor his friends believed it was possible that HIV was causing his symptoms. By the time he sought medical attention it was too late. <a href="https://www.nytimes.com/2017/10/11/theater/michael-friedman-aids-death-theater.html">The theatre community was stunned</a> that, in this place and time, AIDS could still kill someone.</p>
<p>Finally, let’s use this data to question our “live fast” assertion from above. We know deaths from all causes rise with age. Maybe the asbsolute number of accidental deaths stays the same (or even rises) but just goes down relative to other causes common to all geezers. As a reality check, let’s ask if the absolute number changes with age.</p>
<pre class="r"><code>gg&lt;-deaths  %&gt;% 
  ggplot(aes(Age,fill=&quot;grey&quot;))+geom_histogram(bins=10)
gg&lt;-gg+labs(title=&#39;Number of Reported Deaths by Accident, by Age&#39;,
            x=&#39;Age at Death&#39;,
            y=&quot;Count&quot;)
gg&lt;-gg+geom_histogram(data=filter(deaths,General_Cause==&quot;Accident&quot;),
                      aes(Age,fill=&quot;black&quot;),
                      bins=10)
gg&lt;-gg+ scale_fill_manual(name=&#39;&#39;,
                          values =c(&#39;grey&#39;=&#39;grey&#39;,&#39;black&#39;=&#39;black&#39;),
                          labels = c(&#39;Accident&#39;,&#39;All Causes&#39;))
gg</code></pre>
<p>
![](img/unnamed-chunk-21-1.png)
</p>
<p>The absolute number of accidental deaths falls as people age, even as total deaths rise. So, yes, rock musicians, like the rest of us, do get more careful as they age!</p>
</div>
<div id="conclusion" class="section level1">
<h1>Conclusion</h1>
<p>This project started out as part of a separate project but I went down an interesting rabbit hole and realized there was something to say about the Wikipedia data set. Alas, the 80/20 rule applies. Most of the time on this project was spent iterating and tweaking the data cleaning part. The HTML manipulation was a pain. Once I had a clean data set, I breezed through the exploration and discovery part…and that was very fun. Still, I learned some more tricks about web scraping and found some surprising things in the data. Win-win!</p>
<p>Stay off the dope, kids!</p>
</div>
